{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to mailie's documentation \u00b6 Mailie is a multi purpose email library for python, comprised of the following: A simple email DSL. A powerful command line tool. Load testing capabilities via async SMTP conversations. Extensibility and hook/plugin system. Two things to keep in mind for mailie is that: Mailie currently relies on both aiofiles (for attachment parsing in cases of both normal and inline attachments). Results of sending mail relies heavily on the MUA that the recipient is using, mailie does not attempt to circumvent any oddities here and you should be aware that mileage may vary for identicle emails. Mailie supports async smtp conversations as part of an initiative to speed up performance of email sending for genuine use, under no circumstances should you use this as a means to overload or cause a DOS style attack on infrastructure in which you do not fully own, period. Features: \u00b6 Synchronous and Asynchronous SMTP clients. Simple plaintext emails. Simple multipart/alternative emails (text/HTML etc). Complex multipart/mixed emails. Powerful attachment capabilities including entire directory support and mime type resolution. A simple DSL for improved readability. Load testing capabilities of an smtp server. Powerful commandline tool that utilises the underlying DSL. Support for plain, startTLS and TLS.","title":"Introduction"},{"location":"#welcome-to-mailies-documentation","text":"Mailie is a multi purpose email library for python, comprised of the following: A simple email DSL. A powerful command line tool. Load testing capabilities via async SMTP conversations. Extensibility and hook/plugin system. Two things to keep in mind for mailie is that: Mailie currently relies on both aiofiles (for attachment parsing in cases of both normal and inline attachments). Results of sending mail relies heavily on the MUA that the recipient is using, mailie does not attempt to circumvent any oddities here and you should be aware that mileage may vary for identicle emails. Mailie supports async smtp conversations as part of an initiative to speed up performance of email sending for genuine use, under no circumstances should you use this as a means to overload or cause a DOS style attack on infrastructure in which you do not fully own, period.","title":"Welcome to mailie's documentation"},{"location":"#features","text":"Synchronous and Asynchronous SMTP clients. Simple plaintext emails. Simple multipart/alternative emails (text/HTML etc). Complex multipart/mixed emails. Powerful attachment capabilities including entire directory support and mime type resolution. A simple DSL for improved readability. Load testing capabilities of an smtp server. Powerful commandline tool that utilises the underlying DSL. Support for plain, startTLS and TLS.","title":"Features:"},{"location":"commandline/","text":"","title":"Commandline"},{"location":"dsl/","text":"","title":"DSL"},{"location":"email/","text":"Email API Reference \u00b6 Email ( * , mail_from = None , rcpt_to = None , policy = SMTP_DEFAULT_POLICY , cc = None , bcc = None , subject = None , text = None , html = None , charset = UTF_8 , headers = None , attachments = None , attachment_strategy = AllFilesStrategy (), preamble = NON_MIME_AWARE_CLIENT_MESSAGE , epilogue = NON_MIME_AWARE_CLIENT_MESSAGE , boundary = None ) \u00b6 An encapsulation of an email message. In cases of multipart email messages this is a tree of Emails. Mailies Email object is treated as a partial mapping, where indexes are based on headers, various utility methods are available for managing message bodies. An email message is a combination of RFC-2822 headers and a payload. If the message is a container (e.g a multipart message) then the payload is a list of EmailMessage objects, otherwise it is just a string. Parameters: Name Type Description Default mail_from typing . Optional [ str ] (Optional) The envelope sender of the email, a compliant email address. If provided this can be automatically deferred when sending the email through the mail SMTPClient. Client send(...) allows overriding this value at runtime. When specified mailie will NOT include this in the email headers as a From header. smtplib cares not about email headers. In order to add a From header to the email pass it explicitly into headers=. When calling send() on the client without specifying the optional mail_from argument, mailie will attempt to fetch the value from the Email instance. None rcpt_to typing . Optional [ typing . Union [ typing . Sequence [ str ], str ]] (Optional) The envelope recipient(s) of the email, a compliant email address or a Sequence of compliant email addresses. If provided this can be automatically defrred when sending the email through the mailie SMTPClient. Client send(...) allows overriding this value at runtime. When specified mailie will NOT include this in the email headers as a To header. smtplib cares not about email headers. In order to add a To header to the email, pass it explicitly into headers=. When calling send() on the client without specifying the optional mail_to argument, mailie will attempt to fetch the value from the Email instance. None policy typing . Union [ str , Policy ] (Optional) An instance of email.policy.Policy used for governing disparate use cases. By default mailie will assume a SMTP policy that automatically handles /r/n. In a nutshell; policies are used to customise the behaviour of various classes in pythons inbuilt email package. For more information see: https://docs.python.org/3/library/email.policy.html. Below outlines some of the inbuilt policies available via python email: :: default (uses python line endings via /n - sometimes undesirable) :: SMTP (clone of default, with /r/n line endings for RFC compliance) :: SMTPUTF8 (a UTF-8 equivalent of smtp , useful for non-ASCII in sender/recipient data) :: HTTP (useful if serialising headers for HTTP traffic) :: strict (clone of default, except raise_on_defect is assigned True to prevent silent failures) If omitted by client code, mailie will assume a SMTP strict equivalent by default. If this is undesirable pass your own policy, e.g email.policy.SMTP. For core policies; mailie supports passing a string to resolve the policy e.g policy='SMTPUTF8' . SMTP_DEFAULT_POLICY cc typing . Optional [ typing . Iterable [ str ]] (Optional) A single email address (string) or an iterable of email addresses. In both cases the emails are converted to a list of distinct addresses. Recipients set for cc (carbon copy) are all visible to each other; in order to include a hidden recipient, opt for bcc=... instead. CC recipients are handled via a CC header and are also added to to_addrs and bcc during the SMTP conversation. Including arbitrary headers for CC is not advised as this is handled internally by the Email instance. None bcc typing . Optional [ typing . Iterable [ str ]] (Optional) A single email address (string) or an iterable of email addresses. In both cases the emails are converted to a list of distinct addresses. In older versions of python email handling via a BCC header revealed recipients, but is however fixed using send_message(...). However mailie will not include a BCC header in the email regardless and all to_addrs; cc + bcc addresses will be compressed into a single iterable when having the SMTP conversation. Including arbitrary headers for BCC is not advised as this is handled internally by the Email instance. None subject typing . Optional [ str ] (Optional) A string to include in the message as part of the subject header. By design emails do not REQUIRE a subject however it is good practice to include one. If omitted the subject of the email will be empty ''. If subject= is provided it will automatically appended into the headers, it is also possible to ignore subject and pass a 'Subject' header directly for the same affect. None text typing . Optional [ str ] (Optional) A string of text to include as the text/plain payload (body) of the email. By default, an empty body will be created. For simple plaintext mails, text= is the only data necessary, however for more multipart variants html & attachments can be provided. None html typing . Optional [ str ] (Optional) A tuple of either length 1 or 2. If the tuple is a single element then the value is considered the HTML content in it's unformatted, raw form. An optional iterable of attachment paths can be provided; these will be have CID's generated implicitly and be formatted into the html content provided in the order in which they are provided. For that reason, a tuple is preferred; using a set cannot guarantee the CID for img src tags in the html template post-format processing. A string of html content to include in the payload (body) of the email. By default, html is omitted and a simple plain text mail is built, if provided the mail is converted to a multipart/alternative where the payload includes both plain text and HTML content. Depending on the recipient(s) client, displaying of this will vary however mailie will signal that the HTML is priority (by the order in which the data is transmitted). None charset EMAIL_CHARSET_ALIAS (Optional) ... UTF_8 headers typing . Optional [ typing . Union [ typing . List [ str ], typing . MutableMapping [ str , str ]]] (Optional) A list of strings which are RFC-5322 or RFC-6532 compliant, where the header field and the header value are separated by colon. A mapping is also permitted where the colons are omitted such as {\"header_field_name\": \"header_field_value\"} None attachments typing . Optional [ EMAIL_ATTACHMENT_PATH_ALIAS ] (Optional) attachments path can support attaching files from the local file system to the email. It can accept a single path (string or PathLike) or an iterable of paths (string or PathLike). Additionally it can accept the path to a directory in which case all files located in that directory will be considered for attachments. These attachments are NOT inline attachments; to provide inline attachments for the alternative body; pass a 2 length tuple to html=(..., ...). None attachment_strategy Attachable A class which implements the mailie.Attachable interface. This class can be provided by the user at runtime in order implement a customised attachment lookup and attachment process. If omitted mailie will use a basic file strategy that takes paths literally and creates FileAttachment objects out of them, if a directory is provided all files in that directory will be turned into FileAttachments and added to the email (NOT inline). The default strategy does not recursive into sub directories to hunt for more files; implement your own strategy if that is what you desire. What kind of emails are typically sent and currently supported? :: Simple plaintext emails :: Simple alternative plaintext/html emails :: Html emails embedded/inline attachments :: Emails with normal attachments AllFilesStrategy() __bool__ () \u00b6 If the Email has any defects returns False . __contains__ ( name ) \u00b6 Check if a particular header is present in the email headers. This check is case insensitive and name should omit the trailing colon : . __delitem__ ( name ) \u00b6 Deletes all headers of name . If no headers are present this implicitly does nothing. __getitem__ ( name ) \u00b6 Ignoring case, retrieve the header with a field value of name . If no header is found no KeyError is raised, but instead None is returned. name does not include the trailing colon : . __len__ () \u00b6 Return the total number of headers in the message, this tally includes duplicate headers. __setitem__ ( name , value ) \u00b6 Adds a new header to the Email where name is the header field_name and value is the field_value respectively. The header is appended to the messages existing headers. This does not overwrite existing headers with the same name, but instead appends possible duplicates. In order to perform an overwrite, consider calling del on the Email instance with the header field name, then appending this header. Email.replace_header(name, value) can be used as a convenience method for replacing a single headers value. __str__ () \u00b6 Returns the entire email message flattened as a string. as_bytes ( unixfrom = False , policy = None ) \u00b6 Returns the entire email message flattened as a bytes object. If unixfrom is True, the envelope sender is included in the bytes object. policy= can be provided to override the default policy for various aspects of formatting. Flattening the message may trigger changes to the underlying EmailMessage and this method may not be the best way to serialize the message. as_string ( unixfrom = False , maxheaderlen = 0 , policy = None ) \u00b6 Return the entire email message flattened as a string. If unixfrom is True, the envelope sender is included the string. If maxheaderlen is 0 , the underlying policy is used for determining the max_line_length, an additional policy= can be passed to defer to that policy instead. attach ( payload ) \u00b6 Add the given payload to the current payload. The current payload will always be a list of objects after this method is called. If you want to set the payload to a scalar object, use set_payload() instead. clear () \u00b6 Clears the headers and payload from the delegated EmailMessage messaged. If you want to retain non Content- headers, use clear_content() instead. clear_content () \u00b6 Clears the payload and all non Content- headers. get ( name , failobj = None ) \u00b6 Return the value of the header named name . If the header is not present in the message then failobj is returned. Invoked by __getitem__ get_all ( name , failobj = None ) \u00b6 Return a list of the header values where name is the header name. If there is no header with that name in the message, then failobj is returned. If the header exists multiple times all of it's values are retruend. get_content_maintype () \u00b6 Return the maintype resolved via get_content_type() e.g plain get_content_subtype () \u00b6 Return the subtype resolved via get_content_type() e.g text get_content_type () \u00b6 Return the emails maintype/subtype. If no Content-Type header exists in the email then get_content_type() is used to determine it. If the Content-Type header is invalid, plain/text is returned. get_default_type () \u00b6 Return the default content type. get_params ( failobj = None , header = CONTENT_TYPE_HEADER , unquote = True ) \u00b6 Returns the messages content headers as a list of tuples split on the = . In the cases where no = exists; an empty string is set. Optional failobj is returned in the instance where there is no Content-Type header, header can be provided to change the search context from Content-Type to that particular header. get_unixfrom () \u00b6 Retrieve the envelope sender header. is_multipart () \u00b6 Return True if the message payload is a list of sub email messages. If is_multipart() returns False the message Email payload should be a string which might be a Content Transfer Encoding binary object. items () \u00b6 Return a list of 2-tuples containing all the messages header field and head values respectively. keys () \u00b6 Return a list of all the messages header field names. replace_header ( _name , _value ) \u00b6 Convenience method for overwriting an existing header with a new value. This method will replace the first instance of the header with _name . This method returns the Email instance for fluency. set_default_type ( ctype ) \u00b6 Sets the default content type. Returns the Email instance for fluency set_unixfrom ( unixfrom ) \u00b6 Set the messages envelope sender header to unixfrom . This is not a property just to keep API delegation with the underlying EmailMessage . smtp_arguments () property \u00b6 Useful attributes for engaging in SMTP communication with this email object. Email from and to headers are used as a fallback if no explicit ones are passed to the mailie clients when sending an email. tree_view ( * , message = None , file = None , level = 0 ) \u00b6 Write the structure of this message to stdout. This is handled recursively. values () \u00b6 Return a list of all the messages header values.","title":"Email"},{"location":"email/#email-api-reference","text":"","title":"Email API Reference"},{"location":"email/#mailie._email.Email","text":"An encapsulation of an email message. In cases of multipart email messages this is a tree of Emails. Mailies Email object is treated as a partial mapping, where indexes are based on headers, various utility methods are available for managing message bodies. An email message is a combination of RFC-2822 headers and a payload. If the message is a container (e.g a multipart message) then the payload is a list of EmailMessage objects, otherwise it is just a string. Parameters: Name Type Description Default mail_from typing . Optional [ str ] (Optional) The envelope sender of the email, a compliant email address. If provided this can be automatically deferred when sending the email through the mail SMTPClient. Client send(...) allows overriding this value at runtime. When specified mailie will NOT include this in the email headers as a From header. smtplib cares not about email headers. In order to add a From header to the email pass it explicitly into headers=. When calling send() on the client without specifying the optional mail_from argument, mailie will attempt to fetch the value from the Email instance. None rcpt_to typing . Optional [ typing . Union [ typing . Sequence [ str ], str ]] (Optional) The envelope recipient(s) of the email, a compliant email address or a Sequence of compliant email addresses. If provided this can be automatically defrred when sending the email through the mailie SMTPClient. Client send(...) allows overriding this value at runtime. When specified mailie will NOT include this in the email headers as a To header. smtplib cares not about email headers. In order to add a To header to the email, pass it explicitly into headers=. When calling send() on the client without specifying the optional mail_to argument, mailie will attempt to fetch the value from the Email instance. None policy typing . Union [ str , Policy ] (Optional) An instance of email.policy.Policy used for governing disparate use cases. By default mailie will assume a SMTP policy that automatically handles /r/n. In a nutshell; policies are used to customise the behaviour of various classes in pythons inbuilt email package. For more information see: https://docs.python.org/3/library/email.policy.html. Below outlines some of the inbuilt policies available via python email: :: default (uses python line endings via /n - sometimes undesirable) :: SMTP (clone of default, with /r/n line endings for RFC compliance) :: SMTPUTF8 (a UTF-8 equivalent of smtp , useful for non-ASCII in sender/recipient data) :: HTTP (useful if serialising headers for HTTP traffic) :: strict (clone of default, except raise_on_defect is assigned True to prevent silent failures) If omitted by client code, mailie will assume a SMTP strict equivalent by default. If this is undesirable pass your own policy, e.g email.policy.SMTP. For core policies; mailie supports passing a string to resolve the policy e.g policy='SMTPUTF8' . SMTP_DEFAULT_POLICY cc typing . Optional [ typing . Iterable [ str ]] (Optional) A single email address (string) or an iterable of email addresses. In both cases the emails are converted to a list of distinct addresses. Recipients set for cc (carbon copy) are all visible to each other; in order to include a hidden recipient, opt for bcc=... instead. CC recipients are handled via a CC header and are also added to to_addrs and bcc during the SMTP conversation. Including arbitrary headers for CC is not advised as this is handled internally by the Email instance. None bcc typing . Optional [ typing . Iterable [ str ]] (Optional) A single email address (string) or an iterable of email addresses. In both cases the emails are converted to a list of distinct addresses. In older versions of python email handling via a BCC header revealed recipients, but is however fixed using send_message(...). However mailie will not include a BCC header in the email regardless and all to_addrs; cc + bcc addresses will be compressed into a single iterable when having the SMTP conversation. Including arbitrary headers for BCC is not advised as this is handled internally by the Email instance. None subject typing . Optional [ str ] (Optional) A string to include in the message as part of the subject header. By design emails do not REQUIRE a subject however it is good practice to include one. If omitted the subject of the email will be empty ''. If subject= is provided it will automatically appended into the headers, it is also possible to ignore subject and pass a 'Subject' header directly for the same affect. None text typing . Optional [ str ] (Optional) A string of text to include as the text/plain payload (body) of the email. By default, an empty body will be created. For simple plaintext mails, text= is the only data necessary, however for more multipart variants html & attachments can be provided. None html typing . Optional [ str ] (Optional) A tuple of either length 1 or 2. If the tuple is a single element then the value is considered the HTML content in it's unformatted, raw form. An optional iterable of attachment paths can be provided; these will be have CID's generated implicitly and be formatted into the html content provided in the order in which they are provided. For that reason, a tuple is preferred; using a set cannot guarantee the CID for img src tags in the html template post-format processing. A string of html content to include in the payload (body) of the email. By default, html is omitted and a simple plain text mail is built, if provided the mail is converted to a multipart/alternative where the payload includes both plain text and HTML content. Depending on the recipient(s) client, displaying of this will vary however mailie will signal that the HTML is priority (by the order in which the data is transmitted). None charset EMAIL_CHARSET_ALIAS (Optional) ... UTF_8 headers typing . Optional [ typing . Union [ typing . List [ str ], typing . MutableMapping [ str , str ]]] (Optional) A list of strings which are RFC-5322 or RFC-6532 compliant, where the header field and the header value are separated by colon. A mapping is also permitted where the colons are omitted such as {\"header_field_name\": \"header_field_value\"} None attachments typing . Optional [ EMAIL_ATTACHMENT_PATH_ALIAS ] (Optional) attachments path can support attaching files from the local file system to the email. It can accept a single path (string or PathLike) or an iterable of paths (string or PathLike). Additionally it can accept the path to a directory in which case all files located in that directory will be considered for attachments. These attachments are NOT inline attachments; to provide inline attachments for the alternative body; pass a 2 length tuple to html=(..., ...). None attachment_strategy Attachable A class which implements the mailie.Attachable interface. This class can be provided by the user at runtime in order implement a customised attachment lookup and attachment process. If omitted mailie will use a basic file strategy that takes paths literally and creates FileAttachment objects out of them, if a directory is provided all files in that directory will be turned into FileAttachments and added to the email (NOT inline). The default strategy does not recursive into sub directories to hunt for more files; implement your own strategy if that is what you desire. What kind of emails are typically sent and currently supported? :: Simple plaintext emails :: Simple alternative plaintext/html emails :: Html emails embedded/inline attachments :: Emails with normal attachments AllFilesStrategy()","title":"Email"},{"location":"email/#mailie._email.Email.__bool__","text":"If the Email has any defects returns False .","title":"__bool__()"},{"location":"email/#mailie._email.Email.__contains__","text":"Check if a particular header is present in the email headers. This check is case insensitive and name should omit the trailing colon : .","title":"__contains__()"},{"location":"email/#mailie._email.Email.__delitem__","text":"Deletes all headers of name . If no headers are present this implicitly does nothing.","title":"__delitem__()"},{"location":"email/#mailie._email.Email.__getitem__","text":"Ignoring case, retrieve the header with a field value of name . If no header is found no KeyError is raised, but instead None is returned. name does not include the trailing colon : .","title":"__getitem__()"},{"location":"email/#mailie._email.Email.__len__","text":"Return the total number of headers in the message, this tally includes duplicate headers.","title":"__len__()"},{"location":"email/#mailie._email.Email.__setitem__","text":"Adds a new header to the Email where name is the header field_name and value is the field_value respectively. The header is appended to the messages existing headers. This does not overwrite existing headers with the same name, but instead appends possible duplicates. In order to perform an overwrite, consider calling del on the Email instance with the header field name, then appending this header. Email.replace_header(name, value) can be used as a convenience method for replacing a single headers value.","title":"__setitem__()"},{"location":"email/#mailie._email.Email.__str__","text":"Returns the entire email message flattened as a string.","title":"__str__()"},{"location":"email/#mailie._email.Email.as_bytes","text":"Returns the entire email message flattened as a bytes object. If unixfrom is True, the envelope sender is included in the bytes object. policy= can be provided to override the default policy for various aspects of formatting. Flattening the message may trigger changes to the underlying EmailMessage and this method may not be the best way to serialize the message.","title":"as_bytes()"},{"location":"email/#mailie._email.Email.as_string","text":"Return the entire email message flattened as a string. If unixfrom is True, the envelope sender is included the string. If maxheaderlen is 0 , the underlying policy is used for determining the max_line_length, an additional policy= can be passed to defer to that policy instead.","title":"as_string()"},{"location":"email/#mailie._email.Email.attach","text":"Add the given payload to the current payload. The current payload will always be a list of objects after this method is called. If you want to set the payload to a scalar object, use set_payload() instead.","title":"attach()"},{"location":"email/#mailie._email.Email.clear","text":"Clears the headers and payload from the delegated EmailMessage messaged. If you want to retain non Content- headers, use clear_content() instead.","title":"clear()"},{"location":"email/#mailie._email.Email.clear_content","text":"Clears the payload and all non Content- headers.","title":"clear_content()"},{"location":"email/#mailie._email.Email.get","text":"Return the value of the header named name . If the header is not present in the message then failobj is returned. Invoked by __getitem__","title":"get()"},{"location":"email/#mailie._email.Email.get_all","text":"Return a list of the header values where name is the header name. If there is no header with that name in the message, then failobj is returned. If the header exists multiple times all of it's values are retruend.","title":"get_all()"},{"location":"email/#mailie._email.Email.get_content_maintype","text":"Return the maintype resolved via get_content_type() e.g plain","title":"get_content_maintype()"},{"location":"email/#mailie._email.Email.get_content_subtype","text":"Return the subtype resolved via get_content_type() e.g text","title":"get_content_subtype()"},{"location":"email/#mailie._email.Email.get_content_type","text":"Return the emails maintype/subtype. If no Content-Type header exists in the email then get_content_type() is used to determine it. If the Content-Type header is invalid, plain/text is returned.","title":"get_content_type()"},{"location":"email/#mailie._email.Email.get_default_type","text":"Return the default content type.","title":"get_default_type()"},{"location":"email/#mailie._email.Email.get_params","text":"Returns the messages content headers as a list of tuples split on the = . In the cases where no = exists; an empty string is set. Optional failobj is returned in the instance where there is no Content-Type header, header can be provided to change the search context from Content-Type to that particular header.","title":"get_params()"},{"location":"email/#mailie._email.Email.get_unixfrom","text":"Retrieve the envelope sender header.","title":"get_unixfrom()"},{"location":"email/#mailie._email.Email.is_multipart","text":"Return True if the message payload is a list of sub email messages. If is_multipart() returns False the message Email payload should be a string which might be a Content Transfer Encoding binary object.","title":"is_multipart()"},{"location":"email/#mailie._email.Email.items","text":"Return a list of 2-tuples containing all the messages header field and head values respectively.","title":"items()"},{"location":"email/#mailie._email.Email.keys","text":"Return a list of all the messages header field names.","title":"keys()"},{"location":"email/#mailie._email.Email.replace_header","text":"Convenience method for overwriting an existing header with a new value. This method will replace the first instance of the header with _name . This method returns the Email instance for fluency.","title":"replace_header()"},{"location":"email/#mailie._email.Email.set_default_type","text":"Sets the default content type. Returns the Email instance for fluency","title":"set_default_type()"},{"location":"email/#mailie._email.Email.set_unixfrom","text":"Set the messages envelope sender header to unixfrom . This is not a property just to keep API delegation with the underlying EmailMessage .","title":"set_unixfrom()"},{"location":"email/#mailie._email.Email.smtp_arguments","text":"Useful attributes for engaging in SMTP communication with this email object. Email from and to headers are used as a fallback if no explicit ones are passed to the mailie clients when sending an email.","title":"smtp_arguments()"},{"location":"email/#mailie._email.Email.tree_view","text":"Write the structure of this message to stdout. This is handled recursively.","title":"tree_view()"},{"location":"email/#mailie._email.Email.values","text":"Return a list of all the messages header values.","title":"values()"}]}